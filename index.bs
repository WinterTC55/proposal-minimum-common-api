<pre class='metadata'>
Title: Minimum Common Web Platform API
Shortname: common-web-platform-api
Group: wintercg
Status: w3c/CG-DRAFT
Level: none
URL: https://common-min-api.proposal.wintercg.org/
Repository: https://github.com/wintercg/proposal-common-minimum-api
Editor: James M Snell, Cloudflare https://cloudflare.com/, jsnell@cloudflare.com
Abstract: Minimum Common Web Platform API for Non-Browser ECMAScript-based runtimes.
Markup Shorthands: markdown yes
</pre>
<pre class=link-defaults>
spec:url; type:interface; text:URL
spec:html; type:attribute; for:Window; text:navigator
spec:ecmascript; type:dfn; text:record
</pre>
<pre class="anchors">
urlPrefix: https://tc39.es/proposal-import-attributes/; spec: JSIMPORTATTRIBUTES
    type: abstract-op
        text: HostGetSupportedImportAttributes; url: sec-hostgetsupportedimportattributes
urlPrefix: https://html.spec.whatwg.org/multipage/; spec: html
    type: dfn
        text: fetch a single module script; url: fetch-a-single-module-script
        text: fetch a single imported module script; url: fetch-a-single-imported-module-script
</pre>

Introduction {#intro}
=====================

*This section is non-normative.*

The Minimum Common Web Platform API is a curated subset of standardized Web Platform APIs intended to define a minimum set of capabilities common to Browser and Non-Browser JavaScript-based runtime environments.

Terminology {#terminology}
==========================

The Web Platform is the combination of technology standards defined by organizations such as the W3C, the WHATWG, and others as implemented by Web Browsers.

A <dfn>Web-interoperable Runtime</dfn> is any ECMAScript-based application runtime environment that implements the subset of Web Platform APIs outlined in this specification.
While this term is intentionally broad to also encompass Web Browsers, the primary focus here is on outlining expectations for non-browser runtimes.

Common API Index {#index}
=========================

All <a>Web-interoperable Runtimes</a> conforming to this specification SHALL implement each of the following Web Platform APIs in accordance with their normative requirements except where modified here. Where any conforming runtime environment chooses (either by necessity or otherwise) to diverge from a normative requirement of the specification, clear explanations of such divergence MUST be made clearly and readily available in the documentation.

Interfaces:

* {{AbortController}}
* {{AbortSignal}}
* {{Blob}}
* {{ByteLengthQueuingStrategy}}
* <code class="idl"><a data-link-type="idl" href="https://wicg.github.io/compression/#compression-stream">CompressionStream</a></code>
* {{CountQueuingStrategy}}
* {{Crypto}}
* {{CryptoKey}}
* <code class="idl"><a data-link-type="idl" href="https://wicg.github.io/compression/#decompression-stream">DecompressionStream</a></code>
* {{DOMException}}
* {{Event}}
* {{EventTarget}}
* {{File}}
* {{FormData}}

    Issue: The {{FormData}} constructor optionally takes {{HTMLFormElement}} and {{HTMLElement}} as parameters.
    TODO: Figure out what implementations without DOM support should do here.
    Node.js and Deno throw if the first parameter is not `undefined` but ignore the second parameter.
    Cloudflare Workers ignores all parameters.

* {{Headers}}
* {{ReadableByteStreamController}}
* {{ReadableStream}}
* {{ReadableStreamBYOBReader}}
* {{ReadableStreamBYOBRequest}}
* {{ReadableStreamDefaultController}}
* {{ReadableStreamDefaultReader}}
* {{Request}}
* {{Response}}
* {{SubtleCrypto}}
* {{TextDecoder}}
* {{TextDecoderStream}}
* {{TextEncoder}}
* {{TextEncoderStream}}
* {{TransformStream}}
* {{TransformStreamDefaultController}}
* {{URL}}
* {{URLSearchParams}}
* {{WebAssembly}}.<l spec="wasm-js-api">{{Global}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Instance}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Memory}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Module}}</l>
* {{WebAssembly}}.<l spec="wasm-js-api">{{Table}}</l>
* {{WritableStream}}
* {{WritableStreamDefaultController}}

Global methods / properties:

* <code class="idl"><a data-link-type="idl" href="https://tc39.es/ecma262/multipage/global-object.html#sec-globalthis">globalThis</a></code>
* globalThis.{{atob()}}
* globalThis.{{btoa()}}
* globalThis.{{console}}
* globalThis.{{crypto}}
* globalThis.{{fetch()}}
* globalThis.{{navigator}}.{{userAgent}}
* globalThis.{{performance}}.{{Performance/now()}}
* globalThis.{{performance}}.{{timeOrigin}}
* globalThis.{{queueMicrotask()}}
* globalThis.{{setTimeout()}} / globalThis.{{clearTimeout()}}
* globalThis.{{setInterval()}} / globalThis.{{clearInterval()}}
* globalThis.{{structuredClone()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/compile()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/compileStreaming()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/instantiate()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/instantiateStreaming()}}
* globalThis.{{WebAssembly}}.{{WebAssembly/validate()}}

Note: This list includes APIs defined in [[FETCH]]. The WinterCG is currently working on a fork of this spec to better fulfill the needs of web-interoperable runtimes, and such runtimes should follow this fork instead. See <a href="https://fetch.spec.wintercg.org">https://fetch.spec.wintercg.org</a>.

The Global Scope {#global-scope}
================================

The exact type of the global scope (`globalThis`) can vary across runtimes. Most Web Platform APIs are defined in terms that assume Web Browser environments that specifically expose types like {{Window}}, {{Worker}}, {{WorkerGlobalScope}}, and so forth. To simplify conformance, all Interfaces, methods, and properties defined by this specification MUST be exposed on the runtime's relevant global scope (e,g., `globalThis.crypto`, `globalThis.ReadableStream`, etc).

With many runtimes, adding a new global-scoped property can introduce breaking changes when the new global conflicts with existing application code. Many Web Platform APIs define global properties using the `readonly` attribute. To avoid introducing breaking changes, runtimes conforming to this specification MAY choose to ignore the `readonly` attribute for properties being added to the global scope.

Requirements for EcmaScript modules {#esm-requirements}
=======================================================

[=Web-interoperable runtimes=] which support EcmaScript modules must implement the following ECMA-262 host hooks as follows:

: [$HostLoadImportedModule$]
:: This host hook must be implemented [[HTML#hostloadimportedmodule|as defined in the HTML spec]], except that they may pass a [=perform the fetch hook=] algorithm to [=fetch a single imported module script=] even when <var ignore="">loadState</var> is undefined. (See also [[#custom-module-loading]].)
: [$HostGetSupportedImportAttributes$]
:: This host hook must be implemented [[HTML#hostgetsupportedimportattributes|as defined in the HTML spec]].
: [$HostGetImportMetaProperties$]
:: If a runtime can never have an [=entrypoint module=] for any [=agent clusters=] (e.g. web browsers), then it may implement this host hook [[HTML#hostgetimportmetaproperties|as defined in the HTML spec]]. Otherwise, it must implement it as follows:
     1. Let <var>moduleScript</var> be <var ignore="">moduleRecord</var>.\[[HostDefined]].
     1. Let <var>urlString</var> and <var>resolveFunction</var> be [[HTML#hostgetimportmetaproperties|as defined in the HTML spec]].
     1. Let <var>is main</var> be true if <var>moduleScript</var> is the [=surrounding agent=]'s [=agent cluster=]'s [=entrypoint module=]; false otherwise.
     1. Return « [=Record=] { \[[Key]]: "<code>url</code>", \[[Value]]: <var>urlString</var> }, [=Record=] { \[[Key]]: "<code>resolve</code>", \[[Value]]: <var>resolveFunction</var> }, [=Record=] { \[[Key]]: "<code>main</code>", \[[Value]]: <var>is main</var> } ».

A [=JavaScript module script=] is an [=agent cluster=]'s <dfn>entrypoint module</dfn> if both of the following conditions hold:
  * The call to [=fetch a single module script=] that created it had <var ignore="">[=isTopLevel=]</var> set to true.
  * That call happened before any other call to [=fetch a single module script=] or before any other JavaScript code was run in the [=agent cluster=].

For the purposes of this definition, runtime initialization code is ignored, even if it is written in JavaScript or uses [=module scripts=].

Issue: This definition does not actually exclude browsers, since the first user code run in an agent cluster might be a <code>&lt;script type="module"&gt;</code>.

Customizing module loading {#custom-module-loading}
---------------------------------------------------

[=Web-interoperable runtimes=] might want to customize the module loading process for EcmaScript modules, e.g. for allowing certain custom HTTP schemes such as <code>node:</code> or <code>npm:</code>, disallowing HTTP(S) imports, or transpiling non-JavaScript code.

They must do this by modifying [=fetch an external module script graph=], [=fetch a module worker script graph=] and [[HTML#hostloadimportedmodule|HostLoadImportedModule]] to pass a custom [=perform the fetch hook=] algorithm (only if <var ignore="">loadState</var> is undefined, in the case of HostLoadImportedModule).

Requirements for navigator.userAgent
====================================

The globalThis.{{navigator}}.{{userAgent}} property is provided such that application code can reliably identify the runtime within which it is running.
The value of the property is a string conforming to the <code class="idl"><a data-link-type="idl" href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.3">`User-Agent`</a></code> construction in RFC 7231:

<pre>
  User-Agent      = product *( RWS ( product / comment ) )
  product         = token ["/" product-version]
  product-version = token
</pre>

While runtimes that implement globalThis.{{navigator}}.{{userAgent}} MUST provide a value that is conformant with the structure defined by RFC 7231, the value SHOULD be treated as a single, complete, opaque, unstructured value. It is RECOMMENDED that the value be limited to a single `product` token excluding the optional `product-version`. For instance, `navigator.userAgent = 'MyRuntime'`. The value SHOULD NOT include any `comment` components.

Extensions {#extensions}
========================

Runtime-specific extensions to any Web Platform API MAY be implemented by conforming runtimes. Such extensions MUST be defined so that their use neither contradicts nor causes the non-conformance of normative functionality of any Web Platform API.

Application use of such extensions must be carefully considered, as doing so reduces interoperability and portability of code across runtimes.
