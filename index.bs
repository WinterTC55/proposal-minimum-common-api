<pre class='metadata'>
Title: Minimum Common Web Platform API
Shortname: minimum-common-api
Group: wintertc
Status: DRAFT
URL: https://min-common-api.proposal.wintertc.org/
Repository: https://github.com/WinterTC55/proposal-minimum-common-api
Editor: James M Snell, Cloudflare https://cloudflare.com/, jsnell@cloudflare.com
Abstract: Minimum Common Web Platform API for Non-Browser ECMAScript-based runtimes.
Markup Shorthands: markdown yes
</pre>
<pre class=link-defaults>
spec:url; type:interface; text:URL
spec:html; type:attribute; for:Window; text:navigator
spec:fetch; type:method; text:fetch()
</pre>

Introduction {#intro}
=====================

*This section is non-normative.*

The Minimum Common Web Platform API is a curated subset of standardized Web Platform APIs intended to define a minimum set of capabilities common to Browser and Non-Browser JavaScript-based runtime environments.

Terminology {#terminology}
==========================

The Web Platform is the combination of technology standards defined by organizations such as the W3C, the WHATWG, and others as implemented by Web Browsers.

A <dfn>Web-interoperable Runtime</dfn> is any ECMAScript-based application runtime environment that implements the subset of Web Platform APIs outlined in this specification.
While this term is intentionally broad to also encompass Web Browsers, the primary focus here is on outlining expectations for non-browser runtimes.

Common API Index {#api-index}
=========================

All <a>Web-interoperable Runtimes</a> conforming to this specification MUST implement each of the following Web Platform APIs. These SHALL be implemented in accordance with their normative requirements except where modified here. Where any conforming runtime environment chooses (either by necessity or otherwise) to diverge from a normative requirement of the specification, clear explanations of such divergence MUST be made clearly and readily available in the documentation.

All of the following interfaces MUST be exposed on the global object accessible through `globalThis`:

* {{AbortController}} [[!DOM]]
* {{AbortSignal}} [[!DOM]]
* {{Blob}} [[!FILEAPI]]
* {{ByteLengthQueuingStrategy}} [[!STREAMS]]
* {{CompressionStream}} [[!COMPRESSION]]
* {{CountQueuingStrategy}} [[!STREAMS]]
* {{Crypto}} [[!WEBCRYPTO]]
* {{CryptoKey}} [[!WEBCRYPTO]]
* {{DecompressionStream}} [[!COMPRESSION]]
* {{DOMException}} [[!WEBIDL]]
* {{ErrorEvent}} [[!HTML]]
* {{Event}} [[!DOM]]
* {{EventTarget}} [[!DOM]]
* {{File}} [[!FILEAPI]]
* {{FormData}} [[!XHR]]
* {{Headers}} [[!FETCH]]
* {{Performance}} [[!HR-TIME]]
* {{PromiseRejectionEvent}} [[!HTML]]
* {{ReadableByteStreamController}} [[!STREAMS]]
* {{ReadableStream}} [[!STREAMS]]
* {{ReadableStreamBYOBReader}} [[!STREAMS]]
* {{ReadableStreamBYOBRequest}} [[!STREAMS]]
* {{ReadableStreamDefaultController}} [[!STREAMS]]
* {{ReadableStreamDefaultReader}} [[!STREAMS]]
* {{Request}} [[!FETCH]]
* {{Response}} [[!FETCH]]
* {{SubtleCrypto}} [[!WEBCRYPTO]]
* {{TextDecoder}} [[!ENCODING]]
* {{TextDecoderStream}} [[!ENCODING]]
* {{TextEncoder}} [[!ENCODING]]
* {{TextEncoderStream}} [[!ENCODING]]
* {{TransformStream}} [[!STREAMS]]
* {{TransformStreamDefaultController}} [[!STREAMS]]
* {{URL}} [[!URL]]
* {{URLPattern}} [[!URLPATTERN]]
* {{URLSearchParams}} [[!URL]]
* {{WebAssembly}}.<l spec="wasm-js-api-2">{{Global}}</l> [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Instance}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Memory}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Module}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Table}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Tag}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{Exception}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{CompileError}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{LinkError}} [[!WASM-JS-API-2]]
* {{WebAssembly}}.{{RuntimeError}} [[!WASM-JS-API-2]]
* {{WritableStream}} [[!STREAMS]]
* {{WritableStreamDefaultController}} [[!STREAMS]]
* {{WritableStreamDefaultWriter}} [[!STREAMS]]

All of the following methods and properties MUST be exposed on the global object accessible through `globalThis`:

* {{globalThis}} [[!ECMASCRIPT]]
* `globalThis.`{{atob()}} [[!HTML]]
* `globalThis.`{{btoa()}} [[!HTML]]
* `globalThis.`{{console}} [[!CONSOLE]]
* `globalThis.`{{crypto}} [[!WEBCRYPTO]]
* `globalThis.`{{fetch()}} [[!FETCH]]
* `globalThis.`{{navigator}}.{{userAgent}} [[!HTML]]
* `globalThis.onerror` (on {{GlobalEventHandlers/onerror|Window}} and {{WorkerGlobalScope/onerror|WorkerGlobalScope}}) [[!HTML]]
* `globalThis.onunhandledrejection` (on {{WindowEventHandlers/onunhandledrejection|Window}} and {{WorkerGlobalScope/onunhandledrejection|WorkerGlobalScope}}) [[!HTML]]
* `globalThis.onrejectionhandled` (on {{WindowEventHandlers/onrejectionhandled|Window}} and {{WorkerGlobalScope/onrejectionhandled|WorkerGlobalScope}}) [[!HTML]]
* `globalThis.`{{performance}} [[!HR-TIME]]
* `globalThis.`{{queueMicrotask()}} [[!HTML]]
* `globalThis.`{{setTimeout()}} / globalThis.{{clearTimeout()}} [[!HTML]]
* `globalThis.`{{setInterval()}} / globalThis.{{clearInterval()}} [[!HTML]]
* `globalThis.`{{structuredClone()}} [[!HTML]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/compile()}} [[!WASM-JS-API-2]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/compileStreaming()}} [[!WASM-WEB-API-2]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/instantiate()}} [[!WASM-JS-API-2]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/instantiateStreaming()}} [[!WASM-WEB-API-2]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/validate()}} [[!WASM-JS-API-2]]
* `globalThis.`{{WebAssembly}}.{{WebAssembly/JSTag}} [[!WASM-JS-API-2]]

The `globalThis`.{{performance}} property MUST be an instance of {{Performance}} interface.

The Global Scope {#global-scope}
================================

The exact type of the global scope (`globalThis`) can vary across runtimes. Most Web Platform APIs are defined in terms that assume Web Browser environments that specifically expose types like {{Window}}, {{Worker}}, {{WorkerGlobalScope}}, and so forth. To simplify conformance, all interfaces, methods, and properties defined by this specification MUST be exposed on the runtime's relevant global scope (e.g., `globalThis.crypto`, `globalThis.ReadableStream`, etc).

With many runtimes, adding a new global-scoped property can introduce breaking changes when the new global conflicts with existing application code. Many Web Platform APIs define global properties using the `readonly` attribute. To avoid introducing breaking changes, runtimes conforming to this specification MAY choose to ignore the `readonly` attribute for properties being added to the global scope. This allows users of these runtimes to delete or overwrite these properties if they conflict with existing application code.

TODO: link to webidl for readonly attribute

The global object on {{Window}}-like and worker environments SHOULD always be an instance of {{EventTarget}}. Web-interoperable runtimes SHOULD follow the <a>report an exception</a> algorithm, and the JavaScript <a href="https://tc39.es/ecma262/#sec-host-promise-rejection-tracker">HostPromiseRejectionTracker</a> host hook, as defined in [[HTML]]. This includes firing the {{Window/error}}, {{Window/unhandledrejection}} and {{Window/rejectionhandled}} events on the global object.

In cases where it is not possible to have the global object be an instance of {{EventTarget}} due to legacy reasons, the relevant events MUST still be fired through a suitable alternative mechanism available at the global scope. This mechanism MUST provide at least the same information that is provided by the relevant event interfaces if the global object were to be an {{EventTarget}}. Such runtimes MUST NOT support the {{GlobalEventHandlers/onerror}}, {{WindowEventHandlers/onunhandledrejection}} and {{WindowEventHandlers/onrejectionhandled}} global properties. Such runtimes NEED NOT implement the {{ErrorEvent}} and {{PromiseRejectionEvent}} interfaces.

Note: For example, in Node.js the global object does not implement {{EventTarget}}, and the relevant events are fired on the `globalThis.process` object with the names `uncaughtException`, `unhandledRejection` and `rejectionHandled`, respectively.

Requirements for default User-Agent value {#useragent-requirements}
========================================================================

The [=default `User-Agent` value=] is provided such that application code can reliably identify the runtime within which it is running. The value MUST be a string conforming to the <code class="idl"><a data-link-type="idl" href="https://datatracker.ietf.org/doc/html/rfc7231#section-5.5.3">`User-Agent`</a></code> construction in RFC 7231:

<pre>
  User-Agent      = product *( RWS ( product / comment ) )
  product         = token ["/" product-version]
  product-version = token
</pre>

The [=default `User-Agent` value=] SHOULD be treated as a single, complete, opaque, unstructured value. It is RECOMMENDED that the value be limited to a single `product` token excluding the optional `product-version`. The value SHOULD NOT include any `comment` components.

> Note: For instance, `navigator.userAgent = 'MyRuntime'`.

Extensions {#extensions}
========================

Runtime-specific extensions to any Web Platform API MAY be implemented by conforming runtimes. Such extensions MUST be defined so that their use neither contradicts, nor causes the non-conformance of, normative functionality of any Web Platform API.

It is important to carefully consider use of such extensions, as it reduces interoperability and portability of code across runtimes.

This specification does not prohibit implementing additional Web Platform APIs beyond those listed here.

Note: For example, the {{Performance}} API could be extended with additional methods or properties beyond those defined in the [[!HR-TIME]] specifications, such as those defined in the [[PERFORMANCE-TIMELINE]] or [[USER-TIMING]] specifications.

